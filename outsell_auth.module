<?php

/**
 * @file
 * Code for the Outsell Auth feature.
 */

// The auth0.js library.
define('OUTSELL_AUTH_AUTH0JS_LIB', '//cdn.auth0.com/js/lock/11.x.y/lock.min.js');

include_once 'outsell_auth.features.inc';

/**
 * Implements hook_menu().
 */
function outsell_auth_menu() {

  // Top level menu item for all outsell config.
  // @TODO: Move this into a "core" module.
  $menu['admin/config/outsell'] = array(
    'title' => 'Outsell',
    'description' => 'Outsell Options',
    'weight' => -99,
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('access administration pages'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
    'position' => 'left',
  );

  // Settings for authorization.
  $menu['admin/config/outsell/auth'] = array(
    'title' => 'Auth',
    'description' => 'Settings around authentication and authorization.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('outsell_auth_auth_settings_form'),
    'type' => MENU_NORMAL_ITEM,
    'access arguments' => array('administer site configuration'),
  );

  return $menu;
}

/**
 * Drupal form for our auth settings.
 */
function outsell_auth_auth_settings_form() {

  // Set a default text_format form field value.
  $default_var = array('value' => '', 'format' => NULL);

  // Define widget settings.
  $form['outsell_auth'] = array(
    '#type' => 'fieldset',
    '#title' => t('Login widget options'),
    '#weight' => 0,
  );
  $form['outsell_auth']['outsell_auth_widget_pretext'] = array(
    '#type' => 'text_format',
    '#title' => t('Above widget markup'),
    '#description' => t('This setting will add some limited markup above the widget.'),
    '#default_value' => variable_get('outsell_auth_widget_pretext', $default_var)['value'],
    '#format' => 'filtered_html'
  );
  $form['outsell_auth']['outsell_auth_widget_posttext'] = array(
    '#type' => 'text_format',
    '#title' => t('Below widget markup'),
    '#description' => t('This setting will add some limited markup below the widget.'),
    '#default_value' => variable_get('outsell_auth_widget_posttext', $default_var)['value'],
    '#format' => 'filtered_html'
  );

  // Define some SSO settings.
  $form['outsell_auth_sso_options'] = array(
    '#type' => 'fieldset',
    '#title' => t('SSO Options'),
    '#weight' => 1,
  );
  $form['outsell_auth_sso_options']['outsell_auth_sso'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable automatic SSO/SLO.'),
    '#description' => t('This setting will automatically log a user in or out via SSO if applicable.'),
    '#default_value' => variable_get('outsell_auth_sso', TRUE),
  );

  return system_settings_form($form);

}

/**
 * Helper function to parse Auth0 field data to Drupal field type list_text.
 */
function outsell_auth_parse_to_list_text(&$values, $field_info) {

  // If we have a singular value let's make it into a one-element array.
  if (!is_array($values)) {
    $values = array($values);
  }

  // Set some starting values.
  $added = FALSE;
  $return_values = array();
  $allowed_values = &$field_info['settings']['allowed_values'];

  // Loop through each value and make sure the values are allowed if we have allowed values.
  if (isset($field_info['settings']['allowed_values']) && !empty($field_info['settings']['allowed_values'])) {

    // Generate keys from the values if they exist.
    foreach ($values as $value) {
      if (isset($value) && !empty($value)) {
        $key = strtolower(preg_replace('/[^\da-z]/i', '_', $value));
        if (!array_key_exists($key, $allowed_values)) {
          $added = TRUE;
          $allowed_values[$key] = $value;
        }
        $return_values[] = $key;
      }
    }

    // If the value is new let us add it.
    // @TODO: This seems potentially bad. Do we want to keep this?
    if ($added === TRUE) {
      $field_info['settings']['allowed_values'] = $allowed_values;
      field_update_field($field_info);
    }

  }

  // If we don't need to validate let's jsut pass through.
  else {
    $return_values = $values;
  }

  // Return either the array or its first element.
  return (count($return_values) > 1) ? $return_values : $return_values[0];

}

/**
 * Implements hook_auth0_params_alter().
 *
 * Try to grab drupal error messages and inject them into the lock widget so
 * we get useful feedback on auth0 rule fails.
 *
 * See: https://github.com/auth0/lock/issues/637 (closed but doesnt work on D7)
 */
function outsell_auth_auth0_params_alter(&$params, &$show) {

  // Get all error messages.
  $messages = drupal_get_messages('error');

  // Go through our error messages.
  foreach ($messages['error'] as $message) {

    // If a message is an auth0_lock_error then break it apart and flash message it.
    if (strpos($message, 'auth0_lock_error:') !== FALSE) {
      $error = explode(':', $message);
      $show->message = $message;
      $show->flashMessage->type = 'error';
      $show->flashMessage->text = $error[2];
    }

  }

}

/**
 * Implements hook_auth0_user_pre_login_alter().
 *
 * Do some preprocessing of our Auth0 user_info before we pass it on to the
 * normal field and role mapping.
 */
function outsell_auth_auth0_user_pre_login_alter(&$user_info, $id_token) {

  // Copy the user_metadata up a level so it works better with the built in auth0 mappings.
  foreach ($user_info['user_metadata'] as $key => $value) {
    $user_info[$key] = $value;
  }

  // Get our claim mappings.
  $mappings = auth0_pipeListToArray(variable_get('auth0_claim_mapping'));

  // Go through each field and appropriately parse it.
  foreach ($mappings as $mapping) {

    // Grab both our field keys.
    $auth0_field = $mapping[0];
    $drupal_field = $mapping[1];

    // Get info on the field so we can use the correct translation.
    $field_info = field_info_field($drupal_field);

    // Call the correct translator func.
    // @TODO: add more types here.
    switch ($field_info['type']) {
      case 'list_text':
        $user_info[$auth0_field] = outsell_auth_parse_to_list_text($user_info[$auth0_field], $field_info);
        break;

      case 'list_boolean':
        // Seriously Drupal?
        $user_info[$auth0_field] = (int) $user_info[$auth0_field];
        break;

      case 'datestamp':
        $user_info[$auth0_field] = strtotime($user_info[$auth0_field]);
        break;

      default:
        $user_info[$auth0_field] = $user_info[$auth0_field];
    }

  }

}

/**
 * Implements hook_theme().
 */
function outsell_auth_theme() {
  $items = array();

  $items['user_login'] = array(
    'render element' => 'form',
    'path' => drupal_get_path('module', 'outsell_auth') . '/templates',
    'template' => 'user-login',
    'preprocess functions' => array(
      'outsell_auth_preprocess_user_login'
    )
  );

  $items['page__user__login'] = array(
    'render element' => 'page',
    'path' => drupal_get_path('module', 'outsell_auth') . '/templates',
    'base hook' => 'page',
    'template' => 'page--user--login'
  );

  return $items;
}

/**
 * Implements hook_preprocess_user_login()
 *
 * @todo: Options for this?
 */
function outsell_auth_preprocess_user_login(&$variables) {

  // Set a default format value.
  $default_var = array('value' => '', 'format' => NULL);

  // Load in the pre and post text vars.
  $variables['pre_text'] = variable_get('outsell_auth_widget_pretext', $default_var)['value'];
  $variables['post_text'] = variable_get('outsell_auth_widget_posttext', $default_var)['value'];

}

/**
 * Helper function to add our auth.js SSO/SLO js.
 */
function outsell_auth_load_authjs_sso() {

  // auth0.js options.
  $options = array(
    'type' => 'external',
    'group' => JS_DEFAULT
  );

  // Add the auth0.js library from the specified CDN and our SLO JS file.
  drupal_add_js(OUTSELL_AUTH_AUTH0JS_LIB, $options);

}

/**
 * Implements hook_preprocess_page().
 */
function outsell_auth_preprocess_page(&$variables) {

  // Load our auth.js for SLO if needed.
  if (variable_get('outsell_auth_sso', TRUE) && user_is_logged_in()) {

    global $user;

    // Only do this for non-user 1, this is to maintain the sanctity of drush uli logins.
    if ($user->uid != 1) {

      // Load the authjs lib.
      outsell_auth_load_authjs_sso();

      // Add the auth0 js settings.
      $outsell_auth_js_settings = array(
        'outsell_auth' => array(
          'domain' => check_plain(variable_get('auth0_domain', '')),
          'client_id' => check_plain(variable_get('auth0_client_id', '')),
          'return_to' => url('user/logout', array('absolute' => TRUE, 'query' => drupal_get_destination()))
        )
      );
      drupal_add_js($outsell_auth_js_settings, 'setting');

      // Load our SLO helper.
      drupal_add_js(drupal_get_path('module', 'outsell_auth') . '/js/outsell_auth.slo.js');

    }

  }

  // Only load the CSS/JS on the user/login.
  if (isset($variables['theme_hook_suggestions']) && !empty($variables['theme_hook_suggestions'])) {
    if (in_array('page__user__login', $variables['theme_hook_suggestions'])) {

      // Add our custom CSS for the login page.
      drupal_add_css(drupal_get_path('module', 'outsell_auth') . '/css/outsell_auth.css');

      // If the user is not logged in then also load authjs lib.
      // @todo: this might be uneccessary since lock.js includes auth0.js
      if (!user_is_logged_in()) {
        outsell_auth_load_authjs_sso();
      }

    }
  }

}

/**
 * Implements hook_js_alter().
 */
function outsell_auth_js_alter(&$javascript) {

  // Use our custom auth0.lock.js to handle autoSSO.
  if (variable_get('outsell_auth_sso', TRUE)) {

    // Grab the path to the auth0.lock.js module.
    $old_auth0_lock_js = drupal_get_path('module', 'auth0') . '/auth0.lock.js';
    $new_auth0_lock_js = drupal_get_path('module', 'outsell_auth') . '/js/auth0.lock.js';

    // Replace the auth0.lock.js with our custom implementation that handles SSO.
    if (isset($javascript[$old_auth0_lock_js])) {
      $javascript[$old_auth0_lock_js]['data'] = $new_auth0_lock_js;
    }

  }

}

/**
 * Implements hook_form_auth0_basic_settings_form_alter().
 *
 * Checks to see if our auth0 config is provided by the ENV and if it is lock it
 * down so other things cannot edit it.
 */
function outsell_auth_form_auth0_basic_settings_form_alter(&$form, $form_state) {

  // Check to see if we have ENVIRONMENTALLY INJECTED auth0 variables.
  if (isset($_ENV['PLATFORM_VARIABLES']) && !empty($_ENV['PLATFORM_VARIABLES'])) {

    // Decode our variables.
    $variables = json_decode(base64_decode($_ENV['PLATFORM_VARIABLES']), TRUE);

    // Define fields we expect to be managed.
    $expected_fields = array(
      'auth0_domain',
      'auth0_client_id',
      'auth0_client_secret'
    );

    // Collect fields that actually are managed.
    $managed_files = array();

    // Loop through our fields and disable ones that are set and non-empty.
    foreach ($expected_fields as $field) {

      // Construct variable key.
      $variable_key = implode(':', array('drupal', $field));

      // Disable the form element if we have a value for it.
      if (isset($variables[$variable_key]) && !empty($variables[$variable_key])) {
        $form[$field]['#disabled'] = TRUE;
        $managed_files[] = $field;
      }

    }

    // Inform the user of this managed status.
    if (isset($managed_files) && !empty($managed_files)) {

      // The message.
      $msg = 'The following fields are managed by the PLATFORM_VARIABLES environmental variable:';
      $msg .= theme_item_list(array(
        'items' => $managed_files,
        'title' => '',
        'attributes' => array(),
        'type' => 'ol'
      ));
      $msg .= 'They will be disabled while this is true. ';
      $msg .= 'For more information about how this works ';
      $msg .= l(
        t('read more.'),
        'https://docs.platform.sh/development/variables.html',
        array('attributes' => array('target' => '_blank'))
      );

      // Construct the markup field.
      $enviro_notice = array(
        '#prefix' => '<div class="messages status">',
        '#markup' => t($msg),
        '#suffix' => '</div>'
      );

      // Add to the begining of our form.
      array_unshift($form, $enviro_notice);

    }

  }

}
